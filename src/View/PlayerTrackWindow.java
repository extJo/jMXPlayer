/**
 * jMXPlayer, a GUI to IEEE PAR1599 (MX) data
 * Copyright Â© 2010 Riccardo Attilio Galli <riccardo@sideralis.org>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * PlayerTrackWindow.java
 *
 * a window to show the current status of a media
 *
 */

package src.View;

import javax.media.Player;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.WindowConstants;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.ActionEvent;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
import javax.swing.JFrame;

/**
 *
 * @author Riquito
 */
public class PlayerTrackWindow extends Window {
	private Player player;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private ButtonGroup buttonGroup;
	private JSlider slider;
	private JToggleButton pauseToggleButton;
	private JToggleButton playToggleButton;
	private JToggleButton stopToggleButton;
	// End of variables declaration//GEN-END:variables

	/**
	 * Creates new form PlayerTrackWindow
	 */
	public PlayerTrackWindow() {
	}

	@Override
	public void render() {
		initComponents();
	}

	@Override
	public void clearAll() {
	}

	public void setPlayer(Player newPlayer) {
		this.player = newPlayer;
	}

	/*
	 * select one of 3 buttons based on value of text text must be one of - play -
	 * pause - stop
	 * 
	 */
	public void selectButton(String text) {
		ButtonModel model = null;

		if (text.compareTo("play") == 0) {
			model = this.playToggleButton.getModel();
		} else if (text.compareTo("pause") == 0) {
			model = this.pauseToggleButton.getModel();
		} else if (text.compareTo("stop") == 0) {
			model = this.stopToggleButton.getModel();
		}

		this.buttonGroup.setSelected(model, true);
	}

	public JSlider getSlider() {
		return this.slider;
	}

	public JToggleButton getPlayButton() {
		return this.playToggleButton;
	}

	public JToggleButton getPauseButton() {
		return this.pauseToggleButton;
	}

	public JToggleButton getStopButton() {
		return this.stopToggleButton;
	}

	/* set the maximum value of the slider */
	public void setTrackLength(int seconds) {
		this.slider.setMaximum(seconds);
	}

	/*
	 * return the track time based on the actual position of the cursor on the
	 * slider. It's in seconds, so absolutely _not_ accurate
	 */
	public int getTrackTime() {
		return this.slider.getValue();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// ">//GEN-BEGIN:initComponents
	private void initComponents() {
		buttonGroup = new ButtonGroup();
		slider = new JSlider();
		playToggleButton = new JToggleButton();
		pauseToggleButton = new JToggleButton();
		stopToggleButton = new JToggleButton();

		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle("Current track");
		slider.setMajorTickSpacing(30);
		slider.setMinorTickSpacing(10);
		slider.setPaintLabels(true);
		slider.setPaintTicks(true);
		slider.setValue(0);
		slider.setEnabled(false);

//        playToggleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mainFrame/Resources/Play24.gif")));
		playToggleButton.setText("play");
		playToggleButton.setEnabled(false);
		playToggleButton.addActionListener(buttonActionListener);

//        pauseToggleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mainFrame/Resources/Pause24.gif")));
		pauseToggleButton.setText("pause");
		pauseToggleButton.setEnabled(false);
		pauseToggleButton.addActionListener(buttonActionListener);

//        stopToggleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mainFrame/Resources/Stop24.gif")));
		stopToggleButton.setText("stop");
		stopToggleButton.setSelected(true);
		stopToggleButton.setEnabled(false);
		stopToggleButton.addActionListener(buttonActionListener);

		this.buttonGroup.add(this.playToggleButton);
		this.buttonGroup.add(this.pauseToggleButton);
		this.buttonGroup.add(this.stopToggleButton);

		GroupLayout layout = new GroupLayout(getContentPane());
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.LEADING)
				.add(layout.createSequentialGroup().addContainerGap()
						.add(stopToggleButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(LayoutStyle.RELATED)
						.add(playToggleButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(LayoutStyle.RELATED)
						.add(pauseToggleButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(LayoutStyle.RELATED)
						.add(slider, GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.LEADING)
				.add(layout.createSequentialGroup().addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.add(layout.createParallelGroup(GroupLayout.LEADING).add(pauseToggleButton)
								.add(playToggleButton).add(stopToggleButton).add(slider, GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))));
		getContentPane().setLayout(layout);
		pack();
	}// </editor-fold>//GEN-END:initComponents

	private ActionListener buttonActionListener = new ActionListener() {
		public void actionPerformed(ActionEvent event) {
			onToggleButtonClicked(event);
		}
	};

	private void onToggleButtonClicked(ActionEvent event) {// GEN-FIRST:event_on_audioBtn_clicked
		this.buttonGroup.setSelected(((JToggleButton) event.getSource()).getModel(), true);
	}// GEN-LAST:event_on_audioBtn_clicked

}
